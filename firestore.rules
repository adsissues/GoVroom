
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document.
    // Admins can read any user document (for role management, etc. - future use)
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Shipments can be read and written by any authenticated user.
    // More granular control (e.g., only admins can delete, or users can only see their own shipments) can be added later.
    match /shipments/{shipmentId} {
      allow read, write, delete: if request.auth != null;
    }

    // Shipment details (subcollection) - same rules as parent shipment for now
    match /shipments/{shipmentId}/details/{detailId} {
      allow read, write, delete: if request.auth != null;
    }

    // Dropdown collections (e.g., carriers, customers)
    // Allow read for any authenticated user.
    // Allow write only for admins (assuming admin role is stored in /users/{uid}).
    match /carriers/{carrierId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /subcarriers/{subcarrierId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /customers/{customerId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
     match /formats/{formatId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /doe/{doeId} { // Assuming 'doe' is a collection name for DOE dropdown items
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Audit Logs: Typically only admins or specific functions write here. Read access might be restricted too.
    // For now, allow admins to write. Read access can be defined later.
    match /audit_logs/{logId} {
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Notifications: Users might read their own notifications. Creating notifications might be server-side or admin.
    // This is a placeholder, specific rules depend on implementation.
    match /notifications/{notificationId} {
        allow read: if request.auth != null; // Example: user can read their notifications
        allow create: if request.auth != null; // Example: server function or admin creates notifications
    }


    // Deny all other access by default
    // It's good practice to have this, but make sure all intended paths are covered above.
    // match /{document=**} {
    //   allow read, write: if false;
    // }
  }
}
